/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.flyway.db.psql.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.example.flyway.db.psql.Dummy;
import org.jooq.example.flyway.db.psql.Keys;
import org.jooq.example.flyway.db.psql.tables.records.PatientRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Patient extends TableImpl<PatientRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>dummy.patient</code>
     */
    public static final Patient PATIENT = new Patient();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatientRecord> getRecordType() {
        return PatientRecord.class;
    }

    /**
     * The column <code>dummy.patient.patient_id</code>.
     */
    public final TableField<PatientRecord, Integer> PATIENT_ID = createField(DSL.name("patient_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>dummy.patient.first_name</code>.
     */
    public final TableField<PatientRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>dummy.patient.last_name</code>.
     */
    public final TableField<PatientRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>dummy.patient.primary_email</code>.
     */
    public final TableField<PatientRecord, String> PRIMARY_EMAIL = createField(DSL.name("primary_email"), SQLDataType.VARCHAR(254), this, "");

    private Patient(Name alias, Table<PatientRecord> aliased) {
        this(alias, aliased, null);
    }

    private Patient(Name alias, Table<PatientRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>dummy.patient</code> table reference
     */
    public Patient(String alias) {
        this(DSL.name(alias), PATIENT);
    }

    /**
     * Create an aliased <code>dummy.patient</code> table reference
     */
    public Patient(Name alias) {
        this(alias, PATIENT);
    }

    /**
     * Create a <code>dummy.patient</code> table reference
     */
    public Patient() {
        this(DSL.name("patient"), null);
    }

    public <O extends Record> Patient(Table<O> child, ForeignKey<O, PatientRecord> key) {
        super(child, key, PATIENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Dummy.DUMMY;
    }

    @Override
    public Identity<PatientRecord, Integer> getIdentity() {
        return (Identity<PatientRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PatientRecord> getPrimaryKey() {
        return Keys.PATIENT_PKEY;
    }

    @Override
    public Patient as(String alias) {
        return new Patient(DSL.name(alias), this);
    }

    @Override
    public Patient as(Name alias) {
        return new Patient(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(String name) {
        return new Patient(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(Name name) {
        return new Patient(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
