package com.example.demo.services;

import com.example.demo.data.PatientDTO;
import com.example.demo.exception.PatientAlreadyExistsException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.PropertySource;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
@PropertySource("classpath:db/queries/patient.properties")
public class PatientService {
    @Autowired
    JdbcTemplate jdbcTemplate;

    @Value("${patient.get}")
    private String GET_PATIENT_SQL;

    @Value("${patient.add}")
    private String ADD_PERSON_SQL;

    @Value("${patient.getall}")
    private String GETALL_PATIENT_SQL;

    @Value("${patient.current.check}")
    private String GET_CURRENT_PATIENT_SQL;

    //We use BeanPropertyRowMapper instead of a custom row mapper here.
    public List<PatientDTO> getAllPatients(){
        String SQL = "select * from patient";
        return jdbcTemplate.query(GETALL_PATIENT_SQL,
                new BeanPropertyRowMapper<>(PatientDTO.class)
                );
    }

    public Optional<PatientDTO> getPatient(int patientID){
        String SQL = "select * from patient where patient_id= ?";
        //SqlParameterSource parameterSource = new MapSqlParameterSource("patient_id", patientID);

        PatientDTO patientDTO = DataAccessUtils.singleResult(jdbcTemplate.query(GET_PATIENT_SQL, new BeanPropertyRowMapper<>(PatientDTO.class),
                new Object[]{patientID}));
        return Optional.ofNullable(patientDTO);

        /*
        try {
            return (PatientDTO)  jdbcTemplate.queryForObject(SQL,
                    new BeanPropertyRowMapper<>(PatientDTO.class),
                    new Object[]{patientID}
            );
        }catch (EmptyResultDataAccessException e) {
            return null;
        }
         */
    }

    //The patient_id is a next_val auto generated by the database
    //hence, we return the generated id in the POJO response
    public Long addPatient(PatientDTO patientDTO) throws PatientAlreadyExistsException {

        //Check if patient with same email id is already registered
        PatientDTO patient = DataAccessUtils.singleResult(jdbcTemplate.query(GET_CURRENT_PATIENT_SQL, new BeanPropertyRowMapper<>(PatientDTO.class),
                new Object[]{patientDTO.getPrimary_email()}));

        //We already have a patient with the given primary email id
        if(patient != null){
            throw new PatientAlreadyExistsException(String.format("Patient with email - %s already exists", patientDTO.getPrimary_email()));
        }

        SimpleJdbcInsert simpleJdbcInsert = new SimpleJdbcInsert(jdbcTemplate).withTableName("patient").usingGeneratedKeyColumns("patient_id");
        MapSqlParameterSource params = new MapSqlParameterSource()
                .addValue("first_name", patientDTO.getFirstName())
                .addValue("last_name", patientDTO.getLastName())
                .addValue("primary_email", patientDTO.getPrimary_email());
        Number id = simpleJdbcInsert.executeAndReturnKey(params);
        return id.longValue();
    }



}
